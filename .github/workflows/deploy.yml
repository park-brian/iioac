name: Deploy Service to AWS App Runner
on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  ORACLE_REGISTRY: container-registry.oracle.com
  SERVICE_STACK: iioac-service
  SERVICE_NAME: iioac
  SERVICE_PORT: 7001
  ECR_REPOSITORY: iioac
  ECR_ACCESS_ROLE: iioac-ecr-access-role
  DOCKER_BUILDKIT: 1

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Oracle Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ORACLE_REGISTRY }}
          username: ${{ secrets.ORACLE_USERNAME }}
          password: ${{ secrets.ORACLE_PASSWORD }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image names
        id: image-names
        run: |
          echo "image_name=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "image_name_latest=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v3
        with:
          context: .
          pull: true
          push: true
          file: Dockerfile
          tags: ${{ steps.image-names.outputs.image_name }},${{ steps.image-names.outputs.image_name_latest }}
          cache-from: type=registry,ref=${{ steps.image-names.outputs.image_name_latest }}
          cache-to: type=inline

      - name: Deploy service
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.SERVICE_STACK }}
          template: "./aws/service.yml"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ApplicationName=${{ env.SERVICE_NAME }},
            ApplicationPort=${{ env.SERVICE_PORT }},
            EcrAccessRole=${{ env.ECR_ACCESS_ROLE }},
            ImageRepository=${{ steps.image-names.outputs.image_name }},
            ImageRepositoryType=ECR
